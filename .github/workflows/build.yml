name: Build

on:
  push:
    paths:
      - src/**
      - "!src/.vscode/**"
      - "!src/test/**"
      - "!src/.codeclimate.yml"
      - "!src/.editorconfig"
      - "!src/.gitignore"
    branches:
      - hotfix/*
      - release/*
      - canary
  workflow_dispatch:

jobs:
  # Setup
  setup:
    name: Setup
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-18.04, macos-10.15]

    steps:
      - uses: actions/checkout@v1

      - name: Install Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - uses: actions/cache@v2
        env:
          cache-name: setup
        with:
          path: src
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('src/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install Dependencies
        working-directory: src
        run: yarn install --network-timeout 1000000

      - name: Optimize
        working-directory: src
        run: yarn run optimize

  # Build frontend
  build-frontend:
    name: Frontend
    needs: setup
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1

      - name: Install Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - uses: actions/cache@v2
        env:
          cache-name: setup
        with:
          path: src
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('src/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Build - Electron entry
        working-directory: src
        run: yarn run build:babel

      - name: Build - NuxtJS
        working-directory: src
        run: yarn run build:nuxt

      - uses: actions/upload-artifact@v2
        with:
          name: dreamtime-dist
          path: |
            src/dist
            src/electron/dist
  
  # Build Electron
  build-electron:
    name: "Electron: ${{ matrix.type }} - ${{ matrix.target }} (${{ matrix.os }})"
    needs: build-frontend
    runs-on: ${{ matrix.os }}

    # Strategy
    # (variables for multiple platforms)
    # https://help.github.com/en/articles/workflow-syntax-for-github-actions#jobsjob_idstrategy
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-18.04, macos-10.15]
        type: [installer, portable]
        target: [default]

        include:
          - target: AppImage # Linux: AppImage
            os: ubuntu-18.04
            type: installer
          - target: rpm # Red Hat, Suse and Fedora Linux
            os: ubuntu-18.04
            type: installer

    steps:
      - uses: actions/checkout@v1

      - name: Install Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - uses: actions/cache@v2
        env:
          cache-name: setup
        with:
          path: src
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('src/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
      
      - uses: actions/download-artifact@v2
        with:
          name: dreamtime-dist
          path: src

      - name: Display structure of downloaded files
        run: ls

      - name: Build ENV
        working-directory: src
        env:
          GITHUB_SHA: ${{ github.sha }}
          BUILD_PORTABLE: ${{ matrix.type == 'portable' }}
          BUILD_TARGET: ${{ matrix.target }}
        run: yarn run build:env

      - name: Build Electron
        working-directory: src
        run: yarn build:electron

      - uses: actions/upload-artifact@v2
        with:
          name: dreamtime-${{ matrix.os }}-${{ matrix.type }}-${{ matrix.target }}
          path: |
            dist/*.7z
            dist/*.exe
            dist/*.snap
            dist/*.AppImage
            dist/*.rpm
            dist/*.pacman
            dist/*.dmg
